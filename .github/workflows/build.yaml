name: build

on:
  push:
    branches: master
    tags: '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Docker build
        id: prepare
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            echo ::set-output name=tag_name::${TAG}
            echo ::set-output name=version::${TAG%-*}
          else
            echo ::set-output name=version::${GITHUB_SHA::8}
          fi
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386
          echo ::set-output name=docker_username::ruimarinho
          echo ::set-output name=docker_image::ruimarinho/openvpn-monitor

      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Login into Docker Hub
        env:
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          echo "${DOCKER_HUB_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin

      - name: Build multi-platform Docker image
        env:
          MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
          UPSTREAM_VERSION: c28d67ed738c0d7083922a43919e08b1d72d8496
        run: |
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=true" \
            --progress=plain \
            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "MAXMIND_LICENSE_KEY=${MAXMIND_LICENSE_KEY}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
            --build-arg "UPSTREAM_VERSION=${UPSTREAM_VERSION}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
            .

      - name: Check Docker image manifest
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      - name: Clear Docker credentials
        run: |
          rm -f ${HOME}/.docker/config.json
